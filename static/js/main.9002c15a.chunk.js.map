{"version":3,"sources":["components/laout-bg/index.js","App.js","serviceWorker.js","index.js"],"names":["LaoutBg","props","useEffect","console","log","className","children","index","state","form","name","doing","toastTitle","clickNum","timeout","time","this","event","type","setState","target","value","n","title","setTimeout","clearTimeout","Toast","placeholder","onChange","change","onClick","handleClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uSAEaA,G,MAAU,SAACC,GAIpB,OAHAC,qBAAU,WACNC,QAAQC,IAAIH,KACd,IAEE,yBAAKI,UAAU,YACX,yBAAKA,UAAU,kBACf,yBAAKA,UAAU,kBACf,yBAAKA,UAAU,kBACf,yBAAKA,UAAU,kBACf,yBAAKA,UAAU,kBACf,yBAAKA,UAAU,kBACdJ,EAAMK,YC6FJC,G,iNAvGXC,MAAQ,CACJC,KAAK,CACDC,KAAM,GACNC,MAAO,IAEXC,WAAY,I,EAEhBC,SAAW,EAAKC,U,EAChBC,KAAO,K,sFAEHC,KAAKH,SAAW,O,6BAEbI,EAAOC,GACVF,KAAKG,SACD,CACIV,KAAK,eACEO,KAAKR,MAAMC,KADd,eAECS,EAAMD,EAAMG,OAAOC,Y,gCAK1B,IAAD,OAEL,OADAL,KAAKM,EAAI,EACF,WAEH,OADA,EAAKA,IACE,EAAKA,K,4BAGbC,GAAQ,IAAD,OACNP,KAAKR,MAAMI,aACXI,KAAKD,KAAOS,YAAW,WACnB,EAAKL,SAAS,CACVP,WAAY,KAEhBa,aAAa,EAAKV,QACpB,MAENC,KAAKG,SAAS,CACVP,WAAYW,M,oCAGJ,IAAD,EACWP,KAAKR,MAAMC,KAA1BC,EADI,EACJA,KAAMC,EADF,EACEA,MACb,OAAID,EAIAC,EAImB,IAApBK,KAAKH,YACJG,KAAKU,MAAM,+CACJ,GAERV,KAAKH,YAAc,GAClBG,KAAKU,MAAM,qGACJ,QAFX,GAPIV,KAAKU,MAAM,6BACJ,IALPV,KAAKU,MAAM,qDACJ,K,+BAeL,IAAD,SACmBV,KAAKR,MAAMC,KAA3BC,EADH,EACGA,KAAMC,EADT,EACSA,MACNC,EAAcI,KAAKR,MAAnBI,WACR,OACI,kBAAC,EAAD,KACI,yBAAKP,UAAU,QACX,yBAAKA,UAAU,eAAf,wCAGA,yBAAKA,UAAU,aACX,yBAAKA,UAAU,mBACX,2BACIgB,MAAOX,EACPQ,KAAK,OACLS,YAAY,6CACZC,SAAU,SAACX,GAAS,EAAKY,OAAOZ,EAAO,YAG/C,yBAAKZ,UAAU,mBACX,2BACIgB,MAAOV,EACPO,KAAK,OACLS,YAAY,iCACZC,SAAU,SAACX,GAAS,EAAKY,OAAOZ,EAAO,aAG/C,yBACIZ,UAAU,gBACVyB,QAAS,WAAK,EAAKC,gBAFvB,kCAIW,OAIlBnB,EAAa,yBAAKP,UAAU,SACxBO,GACE,U,GAlGHoB,IAAMC,YCSNC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9002c15a.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport './index.css';\nexport const LaoutBg = (props) => {\n    useEffect(()=>{\n        console.log(props)\n    },[])\n    return (\n        <div className=\"laout-bg\">\n            <div className=\"laout-bg-item\"></div>\n            <div className=\"laout-bg-item\"></div>\n            <div className=\"laout-bg-item\"></div>\n            <div className=\"laout-bg-item\"></div>\n            <div className=\"laout-bg-item\"></div>\n            <div className=\"laout-bg-item\"></div>\n            {props.children}\n        </div>\n    )\n}\n    ","import React from 'react';\nimport { LaoutBg } from './components/laout-bg/index'\nimport './App.css';\nclass index extends React.Component {\n    state = {\n        form:{\n            name: '',\n            doing: ''\n        },\n        toastTitle: ''\n    }\n    clickNum = this.timeout()\n    time = null\n    componentWillUnmount(){\n        this.clickNum = null\n    }\n    change(event, type){\n        this.setState(\n            {\n                form: {\n                    ...this.state.form,\n                    [type]:event.target.value\n                }\n            }\n        )\n    }\n    timeout(){\n        this.n = 0;\n        return () => {\n            this.n ++\n            return this.n\n        }\n    }\n    Toast (title) {\n        if(!this.state.toastTitle) {\n            this.time = setTimeout(()=>{\n                this.setState({\n                    toastTitle: ''\n                })\n                clearTimeout(this.time)\n            },5000)\n        }\n        this.setState({\n            toastTitle: title\n        })\n    }\n    handleClick () {\n        const {name, doing} = this.state.form\n        if(!name) {\n            this.Toast('请填写您的大名！')\n            return false\n        }\n        if(!doing) {\n            this.Toast('你干啥的')\n            return false\n        }\n        if(this.clickNum() === 5){\n            this.Toast(\"程序代码错误。\")\n            return false\n        }\n        if(this.clickNum() >= 6) {\n            this.Toast(\"咦，都说了代码错误了？你咋还点？\")\n            return false\n        }\n    }\n    render() {\n        const { name, doing } = this.state.form;\n        const { toastTitle } =this.state\n        return (\n            <LaoutBg>\n                <div className=\"main\">\n                    <div className=\"main-header\">\n                        超级耍你系统\n                    </div>\n                    <div className=\"main-form\">\n                        <div className=\"main-form-input\">\n                            <input\n                                value={name}\n                                type=\"text\"\n                                placeholder=\"请输入你的大名\"\n                                onChange={(event)=>{this.change(event, 'name')}}\n                            />    \n                        </div>\n                        <div className=\"main-form-input\">\n                            <input\n                                value={doing}\n                                type=\"text\"\n                                placeholder=\"你干啥的？\"\n                                onChange={(event)=>{this.change(event, 'doing')}}\n                            />    \n                        </div>\n                        <div\n                            className=\"main-form-btn\"\n                            onClick={()=>{this.handleClick()}}\n                        >\n                            点一下试试 {\">\"}\n                        </div>\n                    </div>\n                </div>\n                {toastTitle ? <div className=\"toast\">\n                    {toastTitle}\n                </div>:null}\n            </LaoutBg>\n        );\n    }\n}\n\nexport default index;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}